
import * as CodeGenerator from "./codeGenerator.meow";
import * as Io from "io";
import { makeCacheFile } from "./utils/makeCacheFile.meow";
import { BytecodeStringifier } from "./bytecodeStringifier.meow";
import { Lexer } from "../frontend/lexer.meow";
import { Parser } from "../frontend/parser.meow";

fn _getDirectoryPath(fullPath) {
    let filename = Io.getFileName(fullPath);
    if (filename.length >= fullPath.length) return "";
    return fullPath.slice(0, fullPath.length - filename.length);
}

fn _isAbsolutePath(path) {
    if (path.length == 0) return false;

    if (path[0] == "/" || path[0] == "\\") return true;

    if (path.length >= 3 && path[1] == ":") {
        let driveLetter = path[0];
        if ((driveLetter >= "a" && driveLetter <= "z") || (driveLetter >= "A" && driveLetter <= "Z")) {
            if (path[2] == "/" || path[2] == "\\") return true;
        }
    }
    return false;
}
export class Compiler {
    fn init(isNoCache) {
        this.compiledModules = {};
        this.isNoCache = isNoCache;
    }

    fn compileProject(entryPath) {
        let initialDir = ".";
        return this._compileFile(entryPath, initialDir);
    }

    fn _compileFile(sourcePath, importerDir) {
        let absolutePath;
        if (_isAbsolutePath(sourcePath)) {
            absolutePath = Io.getAbsolutePath(sourcePath);
        } else {
            absolutePath = Io.getAbsolutePath(importerDir + "/" + sourcePath);
        }

        if (this.compiledModules[absolutePath]) {
            return this.compiledModules[absolutePath];
        }

        let cachePath = makeCacheFile(absolutePath, "build/tcache");

        let source = Io.read(absolutePath);
        let lexer = Lexer(source);
        lexer.filename = absolutePath;
        let tokens = lexer.tokenize();
        let parser = Parser(tokens);
        let ast = parser.parseProgram();

        let codeGen = CodeGenerator.CodeGenerator(ast, this, absolutePath);
        let protos = codeGen.compile();

        let stringifier = BytecodeStringifier();
        let bytecodeText = stringifier.stringify(protos);

        Io.write(cachePath, bytecodeText);
        print("✅ Biên dịch xong: " + absolutePath);

        this.compiledModules[absolutePath] = cachePath;

        return cachePath;
    }
}

let compiler = Compiler(false);
let path = compiler.compileProject("/home/lazycat/Projects/MeowScript/meowscript/tests/test_function.meow");
print("\nĐường dẫn file cache đầu ra:");
print(path);


// let arr = [1, 2, 3, 5 ,4];

// fn init(eas) {
//     fn i(a) {
//         print(a.length);
//     }

//     i(eas);
// }

// init(arr);